** Couverture des préconditions **

Soit TER1, le terrain de test #1

Objectif MoteurJeu_init_pre: précondition de init
	Cas de test MoteurJeu_init_pre_true:
		Préambule: aucun
		Opérations: aucun
		Oracle: ∃ MJ, MJ = init(TER1, 30)

	Cas de test MoteurJeu_init_pre_false:
		Préambule: aucun
		Opérations: aucun
		Oracle: ∄ MJ, MJ = init(TER1, 0)


Objectif MoteurJeu_deplacerHero_pre: précondition de deplacerHero
	Cas de test MoteurJeu_deplacerHero_pre_true:
		Préambule: MJ1 = init(TER1, 30)
		Opérations: aucun
		Oracle:
			(!isPartieTerminee(MJ1) ^ isDeplacementHeroPossible(MJ1, DROITE))
			∃ MJ2, MJ2 = deplacerHero(MJ1, DROITE)

	Cas de test MoteurJeu_deplacerHero_pre_false1:
		Préambule: MJ1 = init(TER1, 30)
		Opérations: aucun
		Oracle:
			(!isPartieTerminee(MJ1) ^ isDeplacementHeroPossible(MJ1, HAUT)) = false
			∄ MJ2, MJ2 = deplacerHero(MJ1, HAUT)

	Cas de test MoteurJeu_deplacerHero_pre_false2:
		Préambule: MJ1 = deplacerHero(init(TER1, 1), DROITE)
		Opérations: aucun
		Oracle:
			(!isPartieTerminee(MJ1) ^ isDeplacementHeroPossible(MJ1, HAUT)) = false
			∄ MJ2, MJ2 = deplacerHero(MJ1, GAUCHE)


** Couverture des invariants **

Soit POS1, une position de test

Objectif MoteurJeu_invariant1 : minimisation de isPartieTerminee
	Cas de test MoteurJeu_invariant1_true:
		Préambule: MJ = deplacerHero(init(TER1, 1), DROITE)
		Opérations: aucune
		Oracle: isPartieTerminee(MJ)

	Cas de test MoteurJeu_invariant1_false:
		Préambule: MJ = init(TER1, 30)
		Opérations: aucune
		Oracle: isPartieTerminee(MJ) = false

Objectif MoteurJeu_invariant2 : minimisation de isPartieGagnee
	Cas de test MoteurJeu_invariant2_true:
		Préambule: MJ =
			fairePasDeMiseAJour(deplacerHero(
				fairePasDeMiseAJour(deplacerHero(
					fairePasDeMiseAJour(deplacerHero(init(TER1, 30), DROITE)),
				DROITE)),
			BAS))
		Opérations: aucune
		Oracle: isPartieGagnee(MJ)

	Cas de test MoteurJeu_invariant2_false:
		Préambule: MJ = init(TER1, 30)
		Opérations: aucune
		Oracle: isPartieGagnee(MJ) = false

Objectif MoteurJeu_invariant3: minimisation de isDeplacementHeroPossible
	Cas de test MoteurJeu_invariant3_conseq:
		Préambule: MJ = init(TER1, 30)
		Opérations: aucune
		Oracle: isDeplacementHeroPossible(MJ, DROITE)

	Cas de test MoteurJeu_invariant3_alt:
		Préambule: MJ = init(TER1, 30)
		Opérations: aucune
		Oracle: isDeplacementHeroPossible(MJ, BAS)

** Couverture des postconditions **

Objectif MoteurJeu_init_post1: postcondition de init sur getPasRestants
	Cas de test MoteurJeu_init_post1:
		Préambule: aucun
		Opérations: MJ = init(TER1, 30)
		Oracle: getPasRestants(MJ) = 30

Objectif MoteurJeu_init_post2: postcondition de init sur getTerrain
	Cas de test MoteurJeu_init_post2:
		Préambule: aucun
		Opérations: MJ = init(TER1, 30)
		Oracle: getTerrain(MJ) = TER1

Objectif MoteurJeu_deplacerHero_post1: postcondition de deplacerHero sur getPasRestants
	Cas de test MoteurJeu_deplacerHero_post1:
		Préambule: MJ1 = init(TER1, 30)
		Opérations: MJ2 = deplacerHero(MJ, DROITE)
		Oracle: getPasRestants(MJ2) = 30 - 1

Objectif MoteurJeu_deplacerHero_post2: postcondition de deplacerHero sur getTerrain
	Cas de test MoteurJeu_deplacerHero_post2_1:
		Préambule: MJ1 = init(TER1, 30)
		Opérations: MJ2 = deplacerHero(MJ, DROITE)
		Oracle: getTerrain(MJ2) = Terrain::deplacerBlocVersDirection(TER1, Terrain::getBlocHero(TER1), DROITE)

	Cas de test MoteurJeu_deplacerHero_post2_2:
		Préambule: MJ = init(TER1, 30)
		Opérations: MJ2 = deplacerHero(MJ, GAUCHE)
		Oracle:
			let* blocHero = Terrain::getBlocHero(TER1)
			and blocDest = Terrain::getBlocVersDirection(TER1, blocHero, GAUCHE)
			in
				getTerrain(MJ2) = Terrain::deplacerBlocVersDirection(Terrain::deplacerBlocVersDirection(TER1, blocDest, GAUCHE), blocHero, GAUCHE)


** Couverture des transitions **

Objectif MoteurJeu_deplacerHero_trans: transition de deplacerHero
	Cas de test MoteurJeu_deplacerHero_trans1:
		Préambule: MJ1 = init(TER1, 30)
		Opérations: MJ2 = deplacerHero(MJ, DROITE)
		Oracle: getPasRestants(MJ2) = 30 - 1 ^ getTerrain(MJ2) = Terrain::deplacerBlocVersDirection(TER1, Terrain::getBlocHero(TER1), DROITE)

	Cas de test MoteurJeu_deplacerHero_trans2:
		Préambule: MJ = init(TER1, 30)
		Opérations: MJ2 = deplacerHero(MJ, GAUCHE)
		Oracle:
			let* blocHero = Terrain::getBlocHero(TER1)
			and blocDest = Terrain::getBlocVersDirection(TER1, blocHero, GAUCHE)
			in
				getPasRestants(MJ2) = 30 - 1
				^ getTerrain(MJ2) = Terrain::deplacerBlocVersDirection(Terrain::deplacerBlocVersDirection(TER1, blocDest, GAUCHE), blocHero, GAUCHE)

