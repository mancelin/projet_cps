** Couverture des préconditions **

Soit TER1, le terrain de test #1

Objectif Terrain_getBlocHero_pre: précondition de getBlocHero
	Cas de test Terrain_getBlocHero_pre_true:
		Préambule: TER1
		Opérations: aucun
		Oracle: ∃ T2, T2 = getBlocHero(TER1)

	Cas de test Terrain_getBlocHero_pre_false:
		Préambule: T = init(5, 5)
		Opérations: aucun
		Oracle: ∄ T2, T2 = getBlocHero(T)

Objectif Terrain_init_pre: précondition de init
	Cas de test Terrain_init_pre_true:
		Préambule: aucun
		Opérations: aucun
		Oracle: ∃ T, T = init(5, 5)

	Cas de test Terrain_init_pre_false1:
		Préambule: aucun
		Opérations: aucun
		Oracle: ∄ T, T = init(0, 5)

	Cas de test Terrain_init_pre_false2:
		Préambule: aucun
		Opérations: aucun
		Oracle: ∄ T, T = init(5, 0)

Objectif Terrain_deplacerBlocVersDirection_pre: précondition de deplacerBlocVersDirection
	Cas de test Terrain_deplacerBlocVersDirection_pre_true:
		Préambule: TER1
		Opérations: aucun
		Oracle: ∃ T2, T2 = deplacerBlocVersDirection(TER1, getBlocHero(TER1), DROITE)

	Cas de test Terrain_deplacerBlocVersDirection_pre_false:
		Préambule: TER1
		Opérations: aucun
		Oracle: ∄ T2, T2 = deplacerBlocVersDirection(TER1, getBlocHero(TER1), HAUT)


** Couverture des invariants **

Soit TER1, terrain de test

Objectif Terrain_invariant1: minimisation de getBlocHero
	Cas de test Terrain_invariant1
		Préambule: TER1
		Opérations: aucune
		Oracle: getBlocHero(TER1) = getBloc(2, 1)

Objectif Terrain_invariant2: minimisation de getBlocVersDirection
	Cas de test Terrain_invariant2:
		Préambule: TER1
		Opérations: aucune
		Oracle: getBlocVersDirection(getBlocHero(TER1), DROITE) = getBloc(3, 1)

Objectif Terrain_invariant3: minimisation de isHeroVivant
	Cas de test Terrain_invariant3_true:
		Préambule: TER1
		Opérations: aucune
		Oracle: isHeroVivant(TER1)

	Cas de test Terrain_invariant3_false:
		Préambule: T = init(5, 5)
		Opérations: aucune
		Oracle: isHeroVivant(T) = false


Objectif Terrain_invariant4: minimisation de isDiamantsRestants
	Cas de test Terrain_invariant4_true:
		Préambule: TER1
		Opérations: aucune
		Oracle: isDiamantsRestants(TER1)

	Cas de test Terrain_invariant4_false:
		Préambule: T = init(5, 5)
		Opérations: aucune
		Oracle: isDiamantsRestants(T) = false

Objectif Terrain_invariant5: minimisation de isDeplacementBlocPossible
	Cas de test Terrain_invariant5_true:
		Préambule: TER1
		Opérations: aucune
		Oracle: isDeplacementBlocPossible(TER1, Terrain::getBlocHero(TER1), DROITE)

	Cas de test Terrain_invariant5_false:
		Préambule: TER1
		Opérations: aucune
		Oracle: isDeplacementBlocPossible(TER1, Terrain::getBlocHero(TER1), HAUT) = false

Objectif Terrain_invariant6: minimisation de getBlocDepuisPosition
	Cas de test Terrain_invariant6:
		Préambule: TER1, POS1
		Opérations: aucune
		Oracle: getBlocDepuisPosition(TER1, POS1) = getBloc(1, 1)

Objectif Terrain_invariant7: minimisation de getBlocs
	Cas de test Terrain_invariant7:
		Préambule: TER1
		Opérations: aucune
		Oracle: getBlocs(TER1) = ensemble des blocs de TER1


** Couverture des postconditions **

Objectif Terrain_init_post1: postcondition de init sur getLargeur
	Cas de test Terrain_init_post1:
		Préambule: aucun
		Opérations: T = init(10, 15)
		Oracle: getLargeur(T) = 10


Objectif Terrain_init_post2: postcondition de init sur getHauteur
	Cas de test Terrain_init_post2:
		Préambule: aucun
		Opérations: T = init(10, 15)
		Oracle: getHauteur(T) = 15

Objectif Terrain_init_post3: postcondition de init sur getPosSortie
	Cas de test Terrain_init_post3:
		Préambule: aucun
		Opérations: T = init(10, 15)
		Oracle: getPosSortie(T) = null

Objectif Terrain_init_post4: postcondition de init sur getPosHero
	Cas de test Terrain_init_post4:
		Préambule: aucun
		Opérations: T = init(10, 15)
		Oracle: getPosHero(T) = null

Objectif Terrain_init_post5: postcondition de init sur getBloc
	Cas de test Terrain_init_post5:
		Préambule: aucun
		Opérations: T = init(10, 15)
		Oracle: FORALL x[0..9], y[0..14], getBloc(T, x, y) = null

Objectif Terrain_setBloc_post1: postcondition de setBloc sur getPosSortie
	Cas de test Terrain_setBloc_post1_conseq:
		Préambule: TER1
		Opérations: T2 = setBloc(TER1, SORTIE_FERMEE, 1, 2)
		Oracle: getPosSortie(T2) = Position::init(5, 3, 1, 2)

	Cas de test Terrain_setBloc_post1_alt:
		Préambule: TER1
		Opérations: T2 = setBloc(TER1, ROCHER, 1, 2)
		Oracle: getPosSortie(T2) = Position::init(5, 3, 4, 2)

Objectif Terrain_setBloc_post2: postcondition de setBloc sur getPosHero
	Cas de test Terrain_setBloc_post2_conseq:
		Préambule: TER1
		Opérations: T2 = setBloc(TER1, HERO, 1, 2)
		Oracle: getPosHero(T2) = Position::init(5, 3, 1, 2)

	Cas de test Terrain_setBloc_post2_alt:
		Préambule: TER1
		Opérations: T2 = setBloc(TER1, VIDE, 1, 2)
		Oracle: getPosHero(T2) = Position::init(5, 3, 2, 1)

Objectif Terrain_setBloc_post3: postcondition de setBloc sur getBloc
	Cas de test Terrain_setBloc_post3:
		Préambule: TER1
		Opérations: T2 = setBloc(TER1, ROCHER, 3, 1)
		Oracle: ...

Objectif Terrain_deplacerBlocVersDirection_post1: postcondition de deplacerBlocVersDirection sur getPosSortie
	Cas de test Terrain_deplacerBlocVersDirection_post1:
		Préambule: TER1
		Opérations: T2 = deplacerBlocVersDirection(TER1, getBlocHero(TER1), DROITE)
		Oracle: getPosSortie(T2) = Position::init(5, 3, 4, 2)

Objectif Terrain_deplacerBlocVersDirection_post2: postcondition de deplacerBlocVersDirection sur getPosHero
	Cas de test Terrain_deplacerBlocVersDirection_post2_conseq:
		Préambule: TER1
		Opérations: T2 = deplacerBlocVersDirection(TER1, getBlocHero(TER1), DROITE)
		Oracle: getPosHero(T2) = Position::init(5, 3, 3, 1)

	Cas de test Terrain_deplacerBlocVersDirection_post2_alt:
		Préambule: TER1
		Opérations: T2 = deplacerBlocVersDirection(TER1, getBloc(1, 1), BAS)
		Oracle: getPosHero(T2) = Position::init(5, 3, 2, 1)

Objectif Terrain_deplacerBlocVersDirection_post3: postcondition de deplacerBlocVersDirection sur getBloc
	Cas de test Terrain_deplacerBlocVersDirection_post3:
		Préambule: TER1
		Opérations: T2 = deplacerBlocVersDirection(TER1, getBlocHero(TER1), DROITE)
		Oracle: ...

Objectif Terrain_fairePasDeMiseAJour_post1: postcondition de fairePasDeMiseAJour sur getPosSortie
	Cas de test Terrain_fairePasDeMiseAJour_post1:
		Préambule: TER1
		Opérations: T2 = fairePasDeMiseAJour(TER1)
		Oracle: getPosSortie(T2) = Position::init(5, 3, 4, 2)

Objectif Terrain_fairePasDeMiseAJour_post2: postcondition de fairePasDeMiseAJour sur getPosHero
	Cas de test Terrain_fairePasDeMiseAJour_post2:
		Préambule: TER1
		Opérations: T2 = fairePasDeMiseAJour(TER1)
		Oracle: getPosHero(T2) = Position::init(5, 3, 2, 1)

Objectif Terrain_fairePasDeMiseAJour_post3: postcondition de fairePasDeMiseAJour sur getBloc
	Cas de test Terrain_fairePasDeMiseAJour_post3:
		Préambule: TER1
		Opérations: T2 = fairePasDeMiseAJour(TER1)
		Oracle: ...


** Couverture des transitions **

Objectif Terrain_setBloc_trans: transition de setBloc
	Cas de test Terrain_setBloc_trans1:
		Préambule: TER1
		Opérations: T2 = setBloc(TER1, SORTIE_FERMEE, 1, 2)
		Oracle:
			getPosSortie(T2) = Position::init(5, 3, 1, 2)
			^ getPosHero(T2) = Position::init(5, 3, 2, 1)
			^ getBloc(...) = ...

	Cas de test Terrain_setBloc_trans2:
		Préambule: TER1
		Opérations: T2 = setBloc(TER1, HERO, 1, 2)
		Oracle:
			getPosSortie(T2) = Position::init(5, 3, 4, 2)
			^ getPosHero(T2) = Position::init(5, 3, 1, 2)
			^ getBloc(...) = ...

Objectif Terrain_deplacerBlocVersDirection_trans: transition de deplacerBlocVersDirection
	Cas de test Terrain_deplacerBlocVersDirection_trans1:
		Préambule: TER1
		Opérations: T2 = deplacerBlocVersDirection(TER1, getBlocHero(TER1), DROITE)
		Oracle:
			getPosSortie(T2) = Position::init(5, 3, 4, 2)
			^ getPosHero(T2) = Position::init(5, 3, 3, 1)
			^ getBloc(T2) = ...

	Cas de test Terrain_deplacerBlocVersDirection_trans2:
		Préambule: TER1
		Opérations: T2 = deplacerBlocVersDirection(TER1, getBloc(1, 1), BAS)
		Oracle:
			getPosSortie(T2) = Position::init(5, 3, 4, 2)
			^ getPosHero(T2) = Position::init(5, 3, 2, 1)
			^ getBloc(T2) = ...

Objectif Terrain_fairePasDeMiseAJour_trans: transition de fairePasDeMiseAJour
	Cas de test Terrain_fairePasDeMiseAJour_trans:
		Préambule: TER1
		Opérations: T2 = fairePasDeMiseAJour(TER1)
		Oracle:
			getPosSortie(T2) = Position::init(5, 3, 4, 2)
			^ getPosHero(T2) = Position::init(5, 3, 2, 1)
			^ getBloc(T2) = ...


** Couverture des paires de transitions **

Objectif Terrain_setBloc_deplacerBlocVersDirection_trans: transitions de setBloc puis deplacerBlocVersDirection
	Cas de test Terrain_setBloc_deplacerBlocVersDirection_trans:
		Préambule: TER1
		Opérations: T2 = deplacerBlocVersDirection(setBloc(TER1, TERRE, 0, 0) getBlocHero(TER1), DROITE)
		Oracle:
			getPosSortie(T2) = Position::init(5, 3, 4, 2)
			^ getPosHero(T2) = Position::init(5, 3, 3, 1)
			^ getBloc(T2) = ...

Objectif Terrain_setBloc_fairePasDeMiseAJour_trans: transitions de setBloc puis fairePasDeMiseAJour
	Cas de test Terrain_setBloc_fairePasDeMiseAJour_trans:
		Préambule: TER1
		Opérations: T2 = fairePasDeMiseAJour(setBloc(TER1, TERRE, 0, 0))
		Oracle:
			getPosSortie(T2) = Position::init(5, 3, 4, 2)
			^ getPosHero(T2) = Position::init(5, 3, 2, 1)
			^ getBloc(T2) = ...

Objectif Terrain_deplacerBlocVersDirection_setBloc_trans: transitions de deplacerBlocVersDirection puis setBloc
	Cas de test Terrain_deplacerBlocVersDirection_setBloc_trans:
		Préambule: TER1
		Opérations: T2 = setBloc(deplacerBlocVersDirection(TER1, getBlocHero(TER1), DROITE), TERRE, 0, 0)
		Oracle:
			getPosSortie(T2) = Position::init(5, 3, 4, 2)
			^ getPosHero(T2) = Position::init(5, 3, 3, 1)
			^ getBloc(T2) = ...

Objectif Terrain_deplacerBlocVersDirection_fairePasDeMiseAJour_trans: transitions de deplacerBlocVersDirection puis fairePasDeMiseAJour
	Cas de test Terrain_deplacerBlocVersDirection_fairePasDeMiseAJour_trans:
		Préambule: TER1
		Opérations: T2 = fairePasDeMiseAJour(deplacerBlocVersDirection(TER1, getBlocHero(TER1), DROITE))
		Oracle:
			getPosSortie(T2) = Position::init(5, 3, 4, 2)
			^ getPosHero(T2) = Position::init(5, 3, 3, 1)
			^ getBloc(T2) = ...

Objectif Terrain_fairePasDeMiseAJour_deplacerBlocVersDirection_trans: transitions de fairePasDeMiseAJour puis deplacerBlocVersDirection
	Cas de test Terrain_fairePasDeMiseAJour_deplacerBlocVersDirection_trans:
		Préambule: TER1
		Opérations: T2 = deplacerBlocVersDirection(fairePasDeMiseAJour(TER1), getBlocHero(TER1), DROITE)
		Oracle:
			getPosSortie(T2) = Position::init(5, 3, 4, 2)
			^ getPosHero(T2) = Position::init(5, 3, 3, 1)
			^ getBloc(T2) = ...

Objectif Terrain_fairePasDeMiseAJour_setBloc_trans: transitions de fairePasDeMiseAJour puis setBloc
	Cas de test Terrain_fairePasDeMiseAJour_setBloc_trans:
		Préambule: TER1
		Opérations: T2 = setBloc(fairePasDeMiseAJour(TER1), TERRE, 0, 0)
		Oracle:
			getPosSortie(T2) = Position::init(5, 3, 4, 2)
			^ getPosHero(T2) = Position::init(5, 3, 2, 1)
			^ getBloc(T2) = ...
