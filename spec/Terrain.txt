Service: Terrain

Types: integer, boolean, enum TypeBloc VIDE, TERRE, MUR, HERO, SORTIE_FERMEE, SORTIE_OUVERTE, ROCHER, DIAMANT

Use: Bloc, Position

Observators:
	getLargeur : [Terrain] -> integer
	getHauteur : [Terrain] -> integer
	getPosHero : [Terrain] -> Position
		pre getPosHero(t) require isHeroVivant(t)
	getPosSortie : [Terrain] -> Position
	getBloc : [Terrain] * integer * integer -> Bloc
	getBlocHaut : [Terrain] * integer * integer -> Bloc
	getBlocBas : [Terrain] * integer * integer -> Bloc
	getBlocGauche : [Terrain] * integer * integer -> Bloc
	getBlocDroite : [Terrain] * integer * integer -> Bloc
	isDiamantsRestants : [Terrain] -> boolean
	isHeroVivant : [Terrain] -> boolean
	isSortieOuverte : [Terrain] -> boolean
	isJouable : [Terrain] -> boolean
	
Constructors:
	init : integer * integer -> [Terrain]
		pre init(l, h) require l > 0 ^ h > 0
	
Operators:
	setPosHero : [Terrain] * integer * integer -> [Terrain]
	setPosSortie : [Terrain] * integer * integer -> [Terrain]
	setTypeBloc : [Terrain] * integer * integer * TypeBloc -> [Terrain]
		
Observations:
	[invariants]
		isJouable(t) ={min} isHeroVivant(t) ^ 
							
		isHeroVivant(t) ={min} ∃x,y tq. Bloc::getType(getBloc(t, x, y)) = HERO
		isDiamantsRestants(t) ={min} ∃x,y tq. Bloc::getType(getBloc(t, x, y)) = DIAMANT
		isSortieOuverte(t) ={min} ∃x,y tq. Bloc::getType(getBloc(t, x, y)) = SORTIE_OUVERTE
		 
	[init]
		getLargeur(init(l,h)) = l
		getHauteur(init(l,h)) = h
		Position::getX(getPosHero(init(l,h)) ) = -1
		Position::getY(getPosHero(init(l,h)) ) = -1 Position::getX(getPosSortie(init(l,h)) ) = -1
		Position::getY(getPosSortie(init(l,h)) ) = -1
		
	[setPosHero]
		Position::getX(getPosHero(setPosHero(t,x,y))) = x
		Position::getY(getPosHero(setPosHero(t,x,y))) = y
	[setPosSortie]
		Position::getX(getPosSortie(setPosSortie(t,x,y))) = x
		Position::getY(getPosSortie(setPosSortie(t,x,y))) = y
	[ouvrirSortie]
		getTypeBloc(t, Position::getX(getPosSortie(t)), Position::getY(getPosSortie(t)) ) = SORTIE_OUVERTE
	[setTypeBloc]
		getTypeBloc(setTypeBloc(t,x,y,tb), x, y) = tb
