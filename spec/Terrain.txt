Service: Terrain

Types: integer, boolean, Set, enum Direction { HAUT, BAS, GAUCHE, DROITE }, enum TypeBloc { VIDE, TERRE, MUR, HERO, SORTIE_FERMEE, SORTIE_OUVERTE, ROCHER, DIAMANT }

Use: Bloc, Position

Observators:
	const getLargeur : [Terrain] -> integer
	const getHauteur : [Terrain] -> integer
	getPosSortie : [Terrain] -> Position
	getPosHero : [Terrain] -> Position
	getBlocHero : [Terrain] -> Bloc
		pre getBlocHero(t) require isHeroVivant(t)
	getBlocDepuisPosition : [Terrain] * Position -> Bloc
	getBloc : [Terrain] * integer * integer -> Bloc
	getBlocVersDirection : [Terrain] * Bloc * Direction -> Bloc
	getBlocs : [Terrain] -> Set<Bloc>
	isHeroVivant : [Terrain] -> boolean
	isDiamantsRestants : [Terrain] -> boolean
	isDeplacementBlocPossible : [Terrain] * Bloc * Direction -> boolean
	
Constructors:
	init : integer * integer -> [Terrain]
		pre init(l, h) require l > 0 ^ h > 0
	
Operators:
	setBloc : [Terrain] * TypeBloc * integer * integer -> [Terrain]
	deplacerBlocVersDirection : [Terrain] * Bloc * Direction -> [Terrain]
		pre deplacerBlocVersDirection(t, bloc, dir) require isDeplacementBlocPossible(t, bloc, dir)
	fairePasDeMiseAJour : [Terrain] -> [Terrain]
	
Observations:
	[invariants]
		getBlocHero(t) ={min} getBlocDepuisPosition(getPosHero(t))
		∀bloc ∈ getBlocs(t), dir ∈ Direction, getBlocVersDirection(t, bloc, dir) ={min} getBloc(t, Position::deplacerVersDirection(Bloc::getPosition(bloc), dir))
		isHeroVivant(t) ={min} ∃bloc ∈ getBlocs(t), Bloc::getType(bloc) = HERO
		isDiamantsRestants(t) ={min} ∃bloc ∈ getBlocs(t) Bloc::getType(bloc) = DIAMANT
		∀bloc ∈ getBlocs(t), dir ∈ Direction, isDeplacementBlocPossible(t, bloc, dir) ={min}
			let blocDest = getBlocVersDirection(t, bloc, dir)
			in
				(Bloc::isHero(bloc) ^ Bloc::isTerre(blocDest))
				V ¬Bloc::isSolide(getBlocVersDirection(t, bloc, dir))
		getBlocDepuisPosition(t, pos) ={min} getBloc(t, Position::getX(pos), Position::getY(pos))
		getBlocs(t) ={min} ∑x∈[0..getLargeur() - 1], y∈[0..getHauteur() - 1], getBloc(t, x, y) 
		
	[init]
		getLargeur(init(l, h)) = l
		getHauteur(init(l, h)) = h
		getPosSortie(init(l, h)) = null
		getPosHero(init(l, h)) = null
		getBlocHero(init(l, h)) = null
		∀x∈[0..getLargeur() - 1],y∈[0..getHauteur() - 1],
			let* bloc = getBloc(init(l, h), x, y)
			and blocPos = Bloc::getPosition(bloc)
			in
				Bloc::isVide(bloc)
				^ Position::getX(blocPos) = x
				^ Position::getY(blocPos) = y
	
	[setBloc]
		getPosSortie(setBloc(t, type, x, y)) =
			if type \in { SORTIE_FERMEE, SORTIE_OUVERTE } then
				Bloc::getPosition(getBloc(t, x, y))
			else
				getPosSortie(t)
		getPosHero(setBloc(t, type, x, y)) =
			if type = HERO then
				Bloc::getPosition(getBloc(t, x, y))
			else
				getPosHero(t)
		∀x'∈[0..getLargeur() - 1],y'∈[0..getHauteur() - 1],
			getBloc(setBloc(t, type, x, y), x', y') =
				if x = x' ^ y = y' then
					Bloc::setType(getBloc(t, x, y), type)
				else
					getBloc(t, x', y')
	
	[deplacerBlocVersDirection]
		getPosSortie(deplacerBlocVersDirection(t, bloc, dir)) = getPosSortie(t)
		getPosHero(deplacerBlocVersDirection(t, bloc, dir)) =
			if bloc = getBlocHero(t) then
				Bloc::getPosition(getBlocVersDirection(t, bloc, dir))
			else
				getPosHero(t)
		∀x∈[0..getLargeur() - 1],y∈[0..getHauteur() - 1],
			getBloc(deplacerBlocVersDirection(t, bloc, dir), x, y) =
				let* blocPos = Bloc::getPosition(bloc)
				and blocX = Position::getX(blocPos)
				and blocY = Position::getY(blocPos)
				and blocDest = getBlocVersDirection(t, bloc, dir)
				and blocDestPos = Bloc::getPosition(blocDest)
				and blocDestX = Position::getX(blocDestPos)
				and blocDestY = Position::getY(blocDestPos)
				in
					if blocX = x ^ blocY = y then
						Bloc::setType(bloc, VIDE)
					else if blocDestX = x ^ blocY = y then
						Bloc::setType(blocDest, Bloc::getType(bloc))
					else
						getBloc(x, y)
				
	[fairePasDeMiseAJour]
		getPosSortie(fairePasDeMiseAJour(t)) = getPosSortie(t)
		getPosHero(fairePasDeMiseAJour(t)) = getPosHero(t)
		∀x∈[0..getLargeur() - 1],y∈[0..getHauteur() - 1],
			getBloc(fairePasDeMiseAJour(t), x, y) =
				let bloc = getBloc(t, x, y)
				in
					if Bloc::isSortieFermee(bloc) ^ ¬isDiamantsRestants(t) then
						Bloc::setType(bloc, SORTIE_OUVERTE)
					else if Bloc::isTombable(bloc) ^ Bloc::isVide(getBlocVersDirection(t, bloc, BAS))
						Bloc::setType(bloc, VIDE)
					else if Bloc::isVide(bloc) ^ Bloc::isTombable(getBlocVersDirection(t, bloc, HAUT))
						Bloc::setType(bloc, Bloc::getType(getBlocVersDirection(t, bloc, HAUT)))
					else
						getBloc(t, pos)
					