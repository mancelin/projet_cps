Service: MoteurJeu

Types: integer, boolean, enum Direction { HAUT, BAS, GAUCHE, DROITE }, enum TypeBloc { VIDE, TERRE, MUR, HERO, SORTIE_FERMEE, SORTIE_OUVERTE, ROCHER, DIAMANT }

Use: Terrain, Bloc, Position

Observators:
	getTerrain : [MoteurJeu] -> Terrain
	getPasRestants : [MoteurJeu] -> integer
	isDeplacementHeroPossible : [MoteurJeu] * Direction -> boolean
	isPartieTerminee : [MoteurJeu] -> boolean
	isPartieGagnee : [MoteurJeu] -> boolean

Constructors:
	init : Terrain * integer -> [MoteurJeu]
		pre init(t, nbPas) require nbPas > 0

Operators:
	deplacerHero : [MoteurJeu] * Direction -> [MoteurJeu]
		pre deplacerHero(mj, dir) require ¬isPartieTerminee(mj) ^ isDeplacementHeroPossible(mj, dir)


Observations:
	[invariant]
		isPartieTerminee(mj) ={min}
			getPasRestants(mj) = 0
			V ¬Terrain::isHeroVivant(getTerrain(mj))
			V isPartieGagnee(mj)
		isPartieGagnee(mj) ={min} Terrain::getPosSortie(getTerrain(mj)) = Terrain::getPosHero(getTerrain(mj))
		∀dir ⊆ { GAUCHE, DROITE }, isDeplacementHeroPossible(mj, dir) ={min}
			let* terrain = getTerrain(mj)
			and blocHero = Terrain::getBlocHero(terrain)
			and blocDest = Terrain::getBlocVersDirection(terrain, blocHero, dir)
			in
				¬Bloc::isSolide(blocDest) V (Bloc::isDeplacable(blocDest) ^ Bloc::isVide(Terrain::getBlocVersDirection(terrain, blocDest, dir))
		∀dir ⊆ { HAUT, BAS }, isDeplacementHeroPossible(mj, dir) ={min}
			let* terrain = getTerrain(mj)
			and blocHero = Terrain::getBlocHero(terrain)
			and blocDest = Terrain::getBlocVersDirection(terrain, blocHero, dir)
			in
				¬Bloc::isSolide(blocDest)

	[init]
		getPasRestants(init(t, nbPas)) = nbPas
		getTerrain(init(t, nbPas)) = t

	[deplacerHero]
		getPasRestants(deplacerHero(mj, dir)) = getPasRestants(mj) - 1
		getTerrain(deplacerHero(mj, dir)) =
			let* terrain = getTerrain(mj)
			and blocHero = Terrain::getBlocHero(terrain)
			and blocDest = Terrain::getBlocVersDirection(terrain, blocHero, dir)
			in
				if ¬Bloc::isSolide(blocDest) then
					Terrain::deplacerBlocVersDirection(terrain, blocHero, dir)
				else if Bloc::isDeplacable(blocDest) and dir \in { GAUCHE, DROITE } then
					let terrain' = Terrain::deplacerBlocVersDirection(terrain, blocDest, dir)
					in Terrain::deplacerBlocVersDirection(terrain', blocHero, dir)
